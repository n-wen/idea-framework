template:
  id: ddd-template-v1
  name: DDD Template
  version: 1.0
  output:
    format: markdown
    filename: docs/ddd.md
    title: "{project name} DDD设计文档"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

agent_config:
  editable_sections: 
    - status
    - description
    - boundary_context
    - context_relation
    - project_structure
    - domain_model_relation

sections:
  - id: status
    title: 状态
    type: choice
    choices: [Draft, Approved]
    instruction: Select the current status of the design
    owner: architect
    editors: [architect]
  - id: description
    title: 项目概述
    instruction: |
      简述一下项目的背景、目标和功能
  - id: boundary_context
    title: 界限上下文划分
    instruction: |
      1. 根据docs/prd.md了解项目的需求
      2. 对业务流程做事件风暴，确定界限上下文
      3. 根据上下文， 产出API和事件
  - id: context_relation
    title: 界限上下文关系
    instruction: |
      1. 根据界限上下文划分，确定每个上下文的边界
      2. 确定每个上下文之间的交互或依赖关系
      3. 使用mermaid
  - id: project_structure
    title: 项目结构
    instruction: |
      1. 上下文界限使用package进行划分
      举例:
      ```
      src/main/java
      ├── com.example.myapp          ← 根包
      │   ├── sharedkernel           ← 共享内核（可选）
      │   │
      │   ├── order           ← 订单上下文（一个限界上下文）
      │   │   ├── application        ← 应用层（用例、服务编排）
      │   │   ├── domain             ← 领域层（聚合根、实体、值对象、领域服务）
      │   │   ├── infrastructure     ← 基础设施层（JPA、消息、持久化实现）
      │   │   └── interfaces         ← 接口层（REST API、CLI、消息监听）
      │   │
      │   ├── inventory       ← 库存上下文（另一个限界上下文）
      │   │   ├── application
      │   │   ├── domain
      │   │   ├── infrastructure
      │   │   └── interfaces
      │   │
      │   └── user            ← 用户上下文（再一个上下文）
      │       ├── application
      │       ├── domain
      │       ├── infrastructure
      │       └── interfaces
      ```
      一个领域下面这几个目录说明:
      - `application`: 应用层, 包含用例, 服务编排
          子项:
          - `service`: 服务的编排, 对外提供能力
          - `interface`: 应用层需要的能力定义
          - `dto`: 数据传输对象, 包含请求参数, 响应参数
          - `exception`: 异常, 包含自定义异常
      - `domain`: 领域层, 包含聚合根, 实体, 值对象, 领域服务
          - `model`: 存放聚合根, 实体, 值对象
          - `service`: 领域服务, 包含业务逻辑; 不能跨领域调用
      - `infrastructure`: 基础设施层, 包含JPA, 消息, 持久化实现, 对application下的interface实现(业务能力真实提供)
          - `service`: 对application下的interface实现
      - `interfaces`: 接口层, 包含REST API, CLI, 消息监听
          子项:
          - `rest`: REST API, controller写到这里
          - `consumer`: 消息监听, 比如mq, redis的队列消费
      2. 应用层（context.application）里只能出现自己上下文的类，或自己声明的接口；
      3. 任何跨上下文的类，必须通过“接口 + 实现”的方式隔离。需要的能力通过spring的依赖注入解耦。

  - id: domain_model_relation
    title: 领域模型关系
    instruction: |
      1. 使用mermaid画出领域模型之间的关系



